// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UnitTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        public static readonly int WaitTime = 750;

        /// <summary>
        /// Rivera_AbrirVentanaSimulador - Use 'Rivera_AbrirVentanaSimuladorParams' to pass parameters into this method.
        /// </summary>
        public void Rivera_AbrirVentanaSimulador()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WinWindow uIMainWindowWindow = this.UIMainWindowWindow;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(522, 10));

            // Type 'Control + s' in 'MainWindow' window
            Keyboard.SendKeys(uIMainWindowWindow, this.Rivera_AbrirVentanaSimuladorParams.UIMainWindowWindowSendKeys, ModifierKeys.Control);
        }
        
        /// <summary>
        /// Rivera_CerrarVentanaSimulador
        /// </summary>
        public void Rivera_CerrarVentanaSimulador()
        {
            #region Variable Declarations
            WinTitleBar uISimulatorTitleBar = this.UISimulatorWindow.UISimulatorTitleBar;
            WinButton uICloseButton = this.UISimulatorWindow.UICloseButton;
            #endregion

            // Click 'Simulator' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uISimulatorTitleBar, new Point(419, 8));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(10, 8));
        }
        
        /// <summary>
        /// Rivera_AsignaSensor1Zona1 - Use 'Rivera_AsignaSensor1Zona1Params' to pass parameters into this method.
        /// </summary>
        public void Rivera_AsignaSensor1Zona1()
        {
            #region Variable Declarations
            WinTitleBar uISimulatorTitleBar = this.UISimulatorWindow.UISimulatorTitleBar;
            WpfRadioButton uIItem1RadioButton = this.UISimulatorWindow1.UISensor1Custom.UIItem1RadioButton;
            #endregion

            // Click 'Simulator' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uISimulatorTitleBar, new Point(325, 5));

            // Select '1' radio button
            uIItem1RadioButton.Selected = this.Rivera_AsignaSensor1Zona1Params.UIItem1RadioButtonSelected;
        }
        
        /// <summary>
        /// Rivera_AsignarSensor1Zona0 - Use 'Rivera_AsignarSensor1Zona0Params' to pass parameters into this method.
        /// </summary>
        public void Rivera_AsignarSensor1Zona0()
        {
            #region Variable Declarations
            WinTitleBar uISimulatorTitleBar = this.UISimulatorWindow.UISimulatorTitleBar;
            WpfRadioButton uIItem0RadioButton = this.UISimulatorWindow1.UISensor1Custom.UIItem0RadioButton;
            #endregion

            // Click 'Simulator' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uISimulatorTitleBar, new Point(360, 12));

            // Select '0' radio button
            uIItem0RadioButton.Selected = this.Rivera_AsignarSensor1Zona0Params.UIItem0RadioButtonSelected;
        }
        
        /// <summary>
        /// Rivera_ActivarSensor1 - Use 'Rivera_ActivarSensor1Params' to pass parameters into this method.
        /// </summary>
        public void Rivera_ActivarSensor1()
        {
            #region Variable Declarations
            WinTitleBar uISimulatorTitleBar = this.UISimulatorWindow.UISimulatorTitleBar;
            WpfCheckBox uIActivateCheckBox = this.UISimulatorWindow1.UISensor1Custom.UIActivateCheckBox;
            #endregion

            // Click 'Simulator' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uISimulatorTitleBar, new Point(453, 12));

            // Select 'Activate' check box
            uIActivateCheckBox.Checked = this.Rivera_ActivarSensor1Params.UIActivateCheckBoxChecked;
        }
        
        /// <summary>
        /// Rivera_DesactivarSensor1 - Use 'Rivera_DesactivarSensor1Params' to pass parameters into this method.
        /// </summary>
        public void Rivera_DesactivarSensor1()
        {
            #region Variable Declarations
            WinTitleBar uISimulatorTitleBar = this.UISimulatorWindow.UISimulatorTitleBar;
            WpfCheckBox uIActivateCheckBox = this.UISimulatorWindow1.UISensor1Custom.UIActivateCheckBox;
            #endregion

            // Click 'Simulator' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uISimulatorTitleBar, new Point(385, 9));

            // Clear 'Activate' check box
            uIActivateCheckBox.Checked = this.Rivera_DesactivarSensor1Params.UIActivateCheckBoxChecked;
        }
        
        /// <summary>
        /// Rivera_DigitarClavePorDefecto
        /// </summary>
        public void Rivera_DigitarClavePorDefecto()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem1Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem1Button;
            WpfButton uIItem2Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem2Button;
            WpfButton uIItem3Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem3Button;
            WpfButton uIItem4Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem4Button;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(490, 10));

            // Click '1' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem1Button, new Point(31, 33));

            // Click '2' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem2Button, new Point(31, 31));

            // Click '3' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem3Button, new Point(41, 33));

            // Click '4' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem4Button, new Point(36, 32));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(82, 29));
        }
        
        /// <summary>
        /// Rivera_DigitarClaveModificada
        /// </summary>
        public void Rivera_DigitarClaveModificada()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem5Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem5Button;
            WpfButton uIItem6Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem6Button;
            WpfButton uIItem7Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem7Button;
            WpfButton uIItem8Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem8Button;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(498, 5));

            // Click '5' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem5Button, new Point(34, 32));

            // Click '6' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem6Button, new Point(40, 27));

            // Click '7' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem7Button, new Point(35, 31));

            // Click '8' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem8Button, new Point(36, 30));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(88, 32));
        }
        
        /// <summary>
        /// Rivera_DigitarArmadoZona0ClavePorDefecto
        /// </summary>
        public void Rivera_DigitarArmadoZona0ClavePorDefecto()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem1Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem1Button;
            WpfButton uIItem2Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem2Button;
            WpfButton uIItem3Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem3Button;
            WpfButton uIItem4Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem4Button;
            WpfButton uIItemButton1 = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton1;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(430, 6));

            // Click '1' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem1Button, new Point(40, 29));

            // Click '2' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem2Button, new Point(36, 34));

            // Click '3' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem3Button, new Point(27, 25));

            // Click '4' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem4Button, new Point(33, 31));

            // Click '*' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton1, new Point(35, 33));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(79, 34));
        }
        
        /// <summary>
        /// Rivera_DigitarArmadoZona1ClavePorDefecto
        /// </summary>
        public void Rivera_DigitarArmadoZona1ClavePorDefecto()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem1Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem1Button;
            WpfButton uIItem2Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem2Button;
            WpfButton uIItem3Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem3Button;
            WpfButton uIItem4Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem4Button;
            WpfButton uIItemButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(454, 8));

            // Click '1' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem1Button, new Point(28, 33));

            // Click '2' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem2Button, new Point(38, 29));

            // Click '3' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem3Button, new Point(35, 36));

            // Click '4' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem4Button, new Point(34, 33));

            // Click '#' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton, new Point(38, 34));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(108, 37));
        }
        
        /// <summary>
        /// Rivera_DigitarArmadoZona0ClaveModificada
        /// </summary>
        public void Rivera_DigitarArmadoZona0ClaveModificada()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem5Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem5Button;
            WpfButton uIItem6Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem6Button;
            WpfButton uIItem7Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem7Button;
            WpfButton uIItem8Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem8Button;
            WpfButton uIItemButton1 = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton1;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(449, 3));

            // Click '5' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem5Button, new Point(37, 33));

            // Click '6' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem6Button, new Point(29, 33));

            // Click '7' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem7Button, new Point(32, 24));

            // Click '8' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem8Button, new Point(34, 19));

            // Click '*' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton1, new Point(40, 26));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(118, 32));
        }
        
        /// <summary>
        /// Rivera_DigitarArmadoZona1ClaveModificada
        /// </summary>
        public void Rivera_DigitarArmadoZona1ClaveModificada()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem5Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem5Button;
            WpfButton uIItem6Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem6Button;
            WpfButton uIItem7Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem7Button;
            WpfButton uIItem8Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem8Button;
            WpfButton uIItemButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(467, 11));

            // Click '5' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem5Button, new Point(36, 30));

            // Click '6' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem6Button, new Point(35, 29));

            // Click '7' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem7Button, new Point(34, 37));

            // Click '8' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem8Button, new Point(31, 30));

            // Click '#' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton, new Point(33, 38));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(79, 31));
        }
        
        /// <summary>
        /// Rivera_AssertLcdArmadoOff - Use 'Rivera_AssertLcdArmadoOffExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Rivera_AssertLcdArmadoOff()
        {
            #region Variable Declarations
            WpfText uIArmadaText = this.UIMainWindowWindow2.UISystemDisplayCustom.UIArmadaText;
            #endregion

            System.Threading.Thread.Sleep(WaitTime);

            Point p = new Point();
            bool isVisible = uIArmadaText.TryGetClickablePoint(out p);
            if (isVisible == true)
            {
                Assert.Fail("Armado deberia de estar apagado");
            }
        }

        /// <summary>
        /// Rivera_AssertLcdArmadoOff - Use 'Rivera_AssertLcdArmadoOffExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Rivera_AssertLcdArmadoOn()
        {
            #region Variable Declarations
            WpfText uIArmadaText = this.UIMainWindowWindow2.UISystemDisplayCustom.UIArmadaText;
            #endregion

            System.Threading.Thread.Sleep(WaitTime);

            Point p = new Point();
            bool isVisible = uIArmadaText.TryGetClickablePoint(out p);
            if (isVisible == false)
            {
                Assert.Fail("Armado deberia de estar encendido");
            }
        }

        /// <summary>
        /// Rivera_AssertLcdAlarmaOff - Use 'Rivera_AssertLcdAlarmaOffExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Rivera_AssertLcdAlarmaOff()
        {
            #region Variable Declarations
            WpfText uIAlarmaText = this.UIMainWindowWindow2.UISystemDisplayCustom.UIAlarmaText;
            #endregion

            System.Threading.Thread.Sleep(WaitTime);

            Point p = new Point();
            bool isVisible = uIAlarmaText.TryGetClickablePoint(out p);
            if (isVisible == true)
            {
                Assert.Fail("Alarma deberia de estar apagada");
            }
        }

        /// <summary>
        /// Rivera_AssertLcdAlarmaOff - Use 'Rivera_AssertLcdAlarmaOffExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Rivera_AssertLcdAlarmaOn()
        {
            #region Variable Declarations
            WpfText uIAlarmaText = this.UIMainWindowWindow2.UISystemDisplayCustom.UIAlarmaText;
            #endregion

            System.Threading.Thread.Sleep(WaitTime);

            Point p = new Point();
            bool isVisible = uIAlarmaText.TryGetClickablePoint(out p);
            if (isVisible == false)
            {
                Assert.Fail("Alarma deberia de estar encendida");
            }
        }

        /// <summary>
        /// Rivera_CleanLcd
        /// </summary>
        public void Rivera_CleanLcd()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIEscButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEscButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(466, 10));

            // Click 'Esc' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEscButton, new Point(80, 25));
        }
        
        /// <summary>
        /// Rivera_CambioClave_DigitarClavePorDefecto
        /// </summary>
        public void Rivera_CambioClave_DigitarClavePorDefecto()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem1Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem1Button;
            WpfButton uIItem2Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem2Button;
            WpfButton uIItem3Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem3Button;
            WpfButton uIItem4Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem4Button;
            WpfButton uIItemButton1 = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton1;
            WpfButton uIItemButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(468, 10));

            // Click '1' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem1Button, new Point(39, 21));

            // Click '2' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem2Button, new Point(32, 36));

            // Click '3' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem3Button, new Point(32, 29));

            // Click '4' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem4Button, new Point(36, 37));

            // Click '*' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton1, new Point(39, 31));

            // Click '#' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton, new Point(33, 27));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(104, 28));
        }
        
        /// <summary>
        /// Rivera_CambioClave_DigitarClaveModificada
        /// </summary>
        public void Rivera_CambioClave_DigitarClaveModificada()
        {
            #region Variable Declarations
            WinTitleBar uIMainWindowTitleBar = this.UIMainWindowWindow.UIMainWindowTitleBar;
            WpfButton uIItem5Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem5Button;
            WpfButton uIItem6Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem6Button;
            WpfButton uIItem7Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem7Button;
            WpfButton uIItem8Button = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItem8Button;
            WpfButton uIItemButton1 = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton1;
            WpfButton uIItemButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIItemButton;
            WpfButton uIEnterButton = this.UIMainWindowWindow1.UISystemButtonPanelCustom.UIEnterButton;
            #endregion

            // Click 'MainWindow' title bar
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIMainWindowTitleBar, new Point(477, 5));

            // Click '5' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem5Button, new Point(44, 36));

            // Click '6' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem6Button, new Point(38, 34));

            // Click '7' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem7Button, new Point(35, 29));

            // Click '8' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItem8Button, new Point(41, 28));

            // Click '*' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton1, new Point(30, 34));

            // Click '#' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIItemButton, new Point(33, 27));

            // Click 'Enter' button
            System.Threading.Thread.Sleep(WaitTime);
            Mouse.Click(uIEnterButton, new Point(116, 25));
        }
        
        /// <summary>
        /// Rivera_AssertLcdError - Use 'Rivera_AssertLcdErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Rivera_AssertLcdErrorOn()
        {
            #region Variable Declarations
            WpfText uIErrorText = this.UIMainWindowWindow2.UISystemDisplayCustom.UIErrorText;
            #endregion

            System.Threading.Thread.Sleep(WaitTime);

            Point p = new Point();
            bool isVisible = uIErrorText.TryGetClickablePoint(out p);
            if (isVisible == false)
            {
                Assert.Fail("Error deberia de estar encendido");
            }
        }

        /// <summary>
        /// Rivera_AssertLcdError - Use 'Rivera_AssertLcdErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Rivera_AssertLcdErrorOff()
        {
            #region Variable Declarations
            WpfText uIErrorText = this.UIMainWindowWindow2.UISystemDisplayCustom.UIErrorText;
            #endregion

            System.Threading.Thread.Sleep(WaitTime);

            Point p = new Point();
            bool isVisible = uIErrorText.TryGetClickablePoint(out p);
            if (isVisible == true)
            {
                Assert.Fail("Error deberia de estar apagado");
            }
        }

        #region Properties
        public virtual Rivera_AbrirVentanaSimuladorParams Rivera_AbrirVentanaSimuladorParams
        {
            get
            {
                if ((this.mRivera_AbrirVentanaSimuladorParams == null))
                {
                    this.mRivera_AbrirVentanaSimuladorParams = new Rivera_AbrirVentanaSimuladorParams();
                }
                return this.mRivera_AbrirVentanaSimuladorParams;
            }
        }
        
        public virtual Rivera_AsignaSensor1Zona1Params Rivera_AsignaSensor1Zona1Params
        {
            get
            {
                if ((this.mRivera_AsignaSensor1Zona1Params == null))
                {
                    this.mRivera_AsignaSensor1Zona1Params = new Rivera_AsignaSensor1Zona1Params();
                }
                return this.mRivera_AsignaSensor1Zona1Params;
            }
        }
        
        public virtual Rivera_AsignarSensor1Zona0Params Rivera_AsignarSensor1Zona0Params
        {
            get
            {
                if ((this.mRivera_AsignarSensor1Zona0Params == null))
                {
                    this.mRivera_AsignarSensor1Zona0Params = new Rivera_AsignarSensor1Zona0Params();
                }
                return this.mRivera_AsignarSensor1Zona0Params;
            }
        }
        
        public virtual Rivera_ActivarSensor1Params Rivera_ActivarSensor1Params
        {
            get
            {
                if ((this.mRivera_ActivarSensor1Params == null))
                {
                    this.mRivera_ActivarSensor1Params = new Rivera_ActivarSensor1Params();
                }
                return this.mRivera_ActivarSensor1Params;
            }
        }
        
        public virtual Rivera_DesactivarSensor1Params Rivera_DesactivarSensor1Params
        {
            get
            {
                if ((this.mRivera_DesactivarSensor1Params == null))
                {
                    this.mRivera_DesactivarSensor1Params = new Rivera_DesactivarSensor1Params();
                }
                return this.mRivera_DesactivarSensor1Params;
            }
        }
        
        public virtual Rivera_AssertLcdArmadoOffExpectedValues Rivera_AssertLcdArmadoOffExpectedValues
        {
            get
            {
                if ((this.mRivera_AssertLcdArmadoOffExpectedValues == null))
                {
                    this.mRivera_AssertLcdArmadoOffExpectedValues = new Rivera_AssertLcdArmadoOffExpectedValues();
                }
                return this.mRivera_AssertLcdArmadoOffExpectedValues;
            }
        }
        
        public virtual Rivera_AssertLcdAlarmaOffExpectedValues Rivera_AssertLcdAlarmaOffExpectedValues
        {
            get
            {
                if ((this.mRivera_AssertLcdAlarmaOffExpectedValues == null))
                {
                    this.mRivera_AssertLcdAlarmaOffExpectedValues = new Rivera_AssertLcdAlarmaOffExpectedValues();
                }
                return this.mRivera_AssertLcdAlarmaOffExpectedValues;
            }
        }
        
        public virtual Rivera_AssertLcdErrorExpectedValues Rivera_AssertLcdErrorExpectedValues
        {
            get
            {
                if ((this.mRivera_AssertLcdErrorExpectedValues == null))
                {
                    this.mRivera_AssertLcdErrorExpectedValues = new Rivera_AssertLcdErrorExpectedValues();
                }
                return this.mRivera_AssertLcdErrorExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        
        public UISimulatorWindow UISimulatorWindow
        {
            get
            {
                if ((this.mUISimulatorWindow == null))
                {
                    this.mUISimulatorWindow = new UISimulatorWindow();
                }
                return this.mUISimulatorWindow;
            }
        }
        
        public UISimulatorWindow1 UISimulatorWindow1
        {
            get
            {
                if ((this.mUISimulatorWindow1 == null))
                {
                    this.mUISimulatorWindow1 = new UISimulatorWindow1();
                }
                return this.mUISimulatorWindow1;
            }
        }
        
        public UIMainWindowWindow2 UIMainWindowWindow2
        {
            get
            {
                if ((this.mUIMainWindowWindow2 == null))
                {
                    this.mUIMainWindowWindow2 = new UIMainWindowWindow2();
                }
                return this.mUIMainWindowWindow2;
            }
        }
        #endregion
        
        #region Fields
        private Rivera_AbrirVentanaSimuladorParams mRivera_AbrirVentanaSimuladorParams;
        
        private Rivera_AsignaSensor1Zona1Params mRivera_AsignaSensor1Zona1Params;
        
        private Rivera_AsignarSensor1Zona0Params mRivera_AsignarSensor1Zona0Params;
        
        private Rivera_ActivarSensor1Params mRivera_ActivarSensor1Params;
        
        private Rivera_DesactivarSensor1Params mRivera_DesactivarSensor1Params;
        
        private Rivera_AssertLcdArmadoOffExpectedValues mRivera_AssertLcdArmadoOffExpectedValues;
        
        private Rivera_AssertLcdAlarmaOffExpectedValues mRivera_AssertLcdAlarmaOffExpectedValues;
        
        private Rivera_AssertLcdErrorExpectedValues mRivera_AssertLcdErrorExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        
        private UISimulatorWindow mUISimulatorWindow;
        
        private UISimulatorWindow1 mUISimulatorWindow1;
        
        private UIMainWindowWindow2 mUIMainWindowWindow2;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_AbrirVentanaSimulador'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_AbrirVentanaSimuladorParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'Control + s' in 'MainWindow' window
        /// </summary>
        public string UIMainWindowWindowSendKeys = "s";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_AsignaSensor1Zona1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_AsignaSensor1Zona1Params
    {
        
        #region Fields
        /// <summary>
        /// Select '1' radio button
        /// </summary>
        public bool UIItem1RadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_AsignarSensor1Zona0'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_AsignarSensor1Zona0Params
    {
        
        #region Fields
        /// <summary>
        /// Select '0' radio button
        /// </summary>
        public bool UIItem0RadioButtonSelected = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_ActivarSensor1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_ActivarSensor1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Activate' check box
        /// </summary>
        public bool UIActivateCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_DesactivarSensor1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_DesactivarSensor1Params
    {
        
        #region Fields
        /// <summary>
        /// Clear 'Activate' check box
        /// </summary>
        public bool UIActivateCheckBoxChecked = false;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_AssertLcdArmadoOff'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_AssertLcdArmadoOffExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Armada' label equals 'Armada'
        /// </summary>
        public string UIArmadaTextDisplayText = "Armada";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_AssertLcdAlarmaOff'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_AssertLcdAlarmaOffExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Alarma' label equals 'Alarma'
        /// </summary>
        public string UIAlarmaTextDisplayText = "Alarma";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Rivera_AssertLcdError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Rivera_AssertLcdErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Error' label equals 'Error'
        /// </summary>
        public string UIErrorTextDisplayText = "Error";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WinWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMainWindowTitleBar.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMainWindowTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow1 : WpfWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UISystemButtonPanelCustom UISystemButtonPanelCustom
        {
            get
            {
                if ((this.mUISystemButtonPanelCustom == null))
                {
                    this.mUISystemButtonPanelCustom = new UISystemButtonPanelCustom(this);
                }
                return this.mUISystemButtonPanelCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISystemButtonPanelCustom mUISystemButtonPanelCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISystemButtonPanelCustom : WpfCustom
    {
        
        public UISystemButtonPanelCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.ButtonPanel";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SystemButtonPanel";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIEscButton
        {
            get
            {
                if ((this.mUIEscButton == null))
                {
                    this.mUIEscButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEscButton.SearchProperties[WpfButton.PropertyNames.Name] = "Esc";
                    this.mUIEscButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEscButton;
            }
        }
        
        public WpfButton UIItem1Button
        {
            get
            {
                if ((this.mUIItem1Button == null))
                {
                    this.mUIItem1Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem1Button.SearchProperties[WpfButton.PropertyNames.Name] = "1";
                    this.mUIItem1Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1Button;
            }
        }
        
        public WpfButton UIItem2Button
        {
            get
            {
                if ((this.mUIItem2Button == null))
                {
                    this.mUIItem2Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem2Button.SearchProperties[WpfButton.PropertyNames.Name] = "2";
                    this.mUIItem2Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem2Button;
            }
        }
        
        public WpfButton UIItem3Button
        {
            get
            {
                if ((this.mUIItem3Button == null))
                {
                    this.mUIItem3Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem3Button.SearchProperties[WpfButton.PropertyNames.Name] = "3";
                    this.mUIItem3Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem3Button;
            }
        }
        
        public WpfButton UIItem4Button
        {
            get
            {
                if ((this.mUIItem4Button == null))
                {
                    this.mUIItem4Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem4Button.SearchProperties[WpfButton.PropertyNames.Name] = "4";
                    this.mUIItem4Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem4Button;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Name] = "#";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIEnterButton
        {
            get
            {
                if ((this.mUIEnterButton == null))
                {
                    this.mUIEnterButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEnterButton.SearchProperties[WpfButton.PropertyNames.Name] = "Enter";
                    this.mUIEnterButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIEnterButton;
            }
        }
        
        public WpfButton UIItem5Button
        {
            get
            {
                if ((this.mUIItem5Button == null))
                {
                    this.mUIItem5Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem5Button.SearchProperties[WpfButton.PropertyNames.Name] = "5";
                    this.mUIItem5Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem5Button;
            }
        }
        
        public WpfButton UIItem6Button
        {
            get
            {
                if ((this.mUIItem6Button == null))
                {
                    this.mUIItem6Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem6Button.SearchProperties[WpfButton.PropertyNames.Name] = "6";
                    this.mUIItem6Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem6Button;
            }
        }
        
        public WpfButton UIItem7Button
        {
            get
            {
                if ((this.mUIItem7Button == null))
                {
                    this.mUIItem7Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem7Button.SearchProperties[WpfButton.PropertyNames.Name] = "7";
                    this.mUIItem7Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem7Button;
            }
        }
        
        public WpfButton UIItem8Button
        {
            get
            {
                if ((this.mUIItem8Button == null))
                {
                    this.mUIItem8Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItem8Button.SearchProperties[WpfButton.PropertyNames.Name] = "8";
                    this.mUIItem8Button.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem8Button;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.Name] = "*";
                    this.mUIItemButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIEscButton;
        
        private WpfButton mUIItem1Button;
        
        private WpfButton mUIItem2Button;
        
        private WpfButton mUIItem3Button;
        
        private WpfButton mUIItem4Button;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIEnterButton;
        
        private WpfButton mUIItem5Button;
        
        private WpfButton mUIItem6Button;
        
        private WpfButton mUIItem7Button;
        
        private WpfButton mUIItem8Button;
        
        private WpfButton mUIItemButton1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISimulatorWindow : WinWindow
    {
        
        public UISimulatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Simulator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Simulator");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UISimulatorTitleBar
        {
            get
            {
                if ((this.mUISimulatorTitleBar == null))
                {
                    this.mUISimulatorTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISimulatorTitleBar.WindowTitles.Add("Simulator");
                    #endregion
                }
                return this.mUISimulatorTitleBar;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Simulator");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUISimulatorTitleBar;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISimulatorWindow1 : WpfWindow
    {
        
        public UISimulatorWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Simulator";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Simulator");
            #endregion
        }
        
        #region Properties
        public UISensor1Custom UISensor1Custom
        {
            get
            {
                if ((this.mUISensor1Custom == null))
                {
                    this.mUISensor1Custom = new UISensor1Custom(this);
                }
                return this.mUISensor1Custom;
            }
        }
        #endregion
        
        #region Fields
        private UISensor1Custom mUISensor1Custom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISensor1Custom : WpfCustom
    {
        
        public UISensor1Custom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Sensor";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "Sensor1";
            this.WindowTitles.Add("Simulator");
            #endregion
        }
        
        #region Properties
        public WpfRadioButton UIItem1RadioButton
        {
            get
            {
                if ((this.mUIItem1RadioButton == null))
                {
                    this.mUIItem1RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIItem1RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "Zona1";
                    this.mUIItem1RadioButton.WindowTitles.Add("Simulator");
                    #endregion
                }
                return this.mUIItem1RadioButton;
            }
        }
        
        public WpfCheckBox UIActivateCheckBox
        {
            get
            {
                if ((this.mUIActivateCheckBox == null))
                {
                    this.mUIActivateCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIActivateCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "AlarmStatus";
                    this.mUIActivateCheckBox.WindowTitles.Add("Simulator");
                    #endregion
                }
                return this.mUIActivateCheckBox;
            }
        }
        
        public WpfRadioButton UIItem0RadioButton
        {
            get
            {
                if ((this.mUIItem0RadioButton == null))
                {
                    this.mUIItem0RadioButton = new WpfRadioButton(this);
                    #region Search Criteria
                    this.mUIItem0RadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "Zona0";
                    this.mUIItem0RadioButton.WindowTitles.Add("Simulator");
                    #endregion
                }
                return this.mUIItem0RadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfRadioButton mUIItem1RadioButton;
        
        private WpfCheckBox mUIActivateCheckBox;
        
        private WpfRadioButton mUIItem0RadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow2 : WpfWindow
    {
        
        public UIMainWindowWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UISystemDisplayCustom UISystemDisplayCustom
        {
            get
            {
                if ((this.mUISystemDisplayCustom == null))
                {
                    this.mUISystemDisplayCustom = new UISystemDisplayCustom(this);
                }
                return this.mUISystemDisplayCustom;
            }
        }
        #endregion
        
        #region Fields
        private UISystemDisplayCustom mUISystemDisplayCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISystemDisplayCustom : WpfCustom
    {
        
        public UISystemDisplayCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Display";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "SystemDisplay";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIAlarmaText
        {
            get
            {
                if ((this.mUIAlarmaText == null))
                {
                    this.mUIAlarmaText = new WpfText(this);
                    #region Search Criteria
                    this.mUIAlarmaText.SearchProperties[WpfText.PropertyNames.AutomationId] = "AlarmIndicator";
                    this.mUIAlarmaText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAlarmaText;
            }
        }
        
        public WpfText UIArmadaText
        {
            get
            {
                if ((this.mUIArmadaText == null))
                {
                    this.mUIArmadaText = new WpfText(this);
                    #region Search Criteria
                    this.mUIArmadaText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ArmedIndicator";
                    this.mUIArmadaText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIArmadaText;
            }
        }
        
        public WpfText UIErrorText
        {
            get
            {
                if ((this.mUIErrorText == null))
                {
                    this.mUIErrorText = new WpfText(this);
                    #region Search Criteria
                    this.mUIErrorText.SearchProperties[WpfText.PropertyNames.AutomationId] = "ErrorIndicator";
                    this.mUIErrorText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIErrorText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIAlarmaText;
        
        private WpfText mUIArmadaText;
        
        private WpfText mUIErrorText;
        #endregion
    }
}
